{"version":3,"sources":["combinations.ts","WinningComboGrid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getAllCombinations","Table","styled","table","Cell","td","props","active","WinningComboGrid","combo","App","useState","Array","fill","cellStates","setCellStates","handleCellClick","cell","getActiveCount","newCellsState","reduce","prev","curr","compareCombos","w","c","potentialCombo","indexOf","i","onClick","combination","winningCombos","potentialThreeLineCombo","forEach","winningCombo","isPotentialThreeLineCombo","toString","potentialCombos","push","getPotentialCombos","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNA+EeA,EA3EY,iBAAqB,CAC9C,EACE,GAAK,GAAK,GAAK,GAAK,GAAM,GAAK,GAAM,GAAK,GAAM,GAAM,GAAK,GAAK,GAAM,GAAM,GAAM,GAEpF,EACE,GAAK,GAAK,GAAK,GAAK,GAAM,GAAK,GAAM,GAAM,GAAM,GAAK,GAAK,GAAM,GAAM,GAAK,GAAM,GAEpF,EACE,GAAM,GAAK,GAAM,GAAK,GAAM,GAAK,GAAK,GAAM,GAAM,GAAK,GAAM,GAAM,GAAK,GAAK,GAAK,GAEpF,EACE,GAAK,GAAK,GAAK,GAAK,GAAM,GAAK,GAAK,GAAM,GAAM,GAAM,GAAK,GAAM,GAAM,GAAM,GAAK,GAEpF,EACE,GAAK,GAAM,GAAM,GAAM,GAAK,GAAK,GAAM,GAAM,GAAK,GAAK,GAAK,GAAK,GAAK,GAAM,GAAM,GAEpF,EACE,GAAK,GAAM,GAAK,GAAM,GAAK,GAAK,GAAK,GAAK,GAAM,GAAM,GAAK,GAAM,GAAM,GAAM,GAAK,GAEpF,EACE,GAAK,GAAM,GAAM,GAAM,GAAK,GAAK,GAAM,GAAM,GAAK,GAAM,GAAK,GAAM,GAAK,GAAK,GAAK,GAEpF,EACE,GAAK,GAAM,GAAM,GAAK,GAAM,GAAK,GAAM,GAAK,GAAK,GAAK,GAAK,GAAK,GAAM,GAAM,GAAM,GAEpF,EACE,GAAM,GAAM,GAAK,GAAK,GAAM,GAAM,GAAK,GAAM,GAAM,GAAK,GAAK,GAAM,GAAK,GAAK,GAAK,GAEpF,EACE,GAAM,GAAM,GAAK,GAAK,GAAM,GAAM,GAAK,GAAM,GAAM,GAAK,GAAK,GAAM,GAAK,GAAK,GAAK,GAEpF,EACE,GAAM,GAAM,GAAM,GAAK,GAAM,GAAM,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAM,GAAM,GAEpF,EACE,GAAK,GAAK,GAAM,GAAM,GAAM,GAAK,GAAM,GAAM,GAAK,GAAK,GAAK,GAAK,GAAM,GAAK,GAAM,GAEpF,EACE,GAAK,GAAK,GAAK,GAAK,GAAK,GAAM,GAAK,GAAM,GAAK,GAAK,GAAM,GAAM,GAAK,GAAM,GAAM,GAEnF,EACE,GAAK,GAAM,GAAK,GAAM,GAAM,GAAK,GAAK,GAAM,GAAM,GAAM,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","file":"static/js/main.71a8e59e.chunk.js","sourcesContent":["// prettier-ignore\nexport type Combination = [boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean];\n\n// prettier-ignore\nconst getAllCombinations = (): Combination[] => [\n  [ //A\n    true,true,true,true,false,true,false,true,false,false,true,true,false,false,false,true\n  ],\n  [ //B\n    true,true,true,true,false,true,false,false,false,true,true,false,false,true,false,true\n  ],\n  [ //C\n    false,true,false,true,false,true,true,false,false,true,false,false,true,true,true,true\n  ],\n  [ //D\n    true,true,true,true,false,true,true,false,false,false,true,false,false,false,true,true\n  ],\n  [ //E\n    true,false,false,false,true,true,false,false,true,true,true,true,true,false,false,true\n  ],\n  [ //F\n    true,false,true,false,true,true,true,true,false,false,true,false,false,false,true,true\n  ],\n  [ //G\n    true,false,false,false,true,true,false,false,true,false,true,false,true,true,true,true\n  ],\n  [ //H\n    true,false,false,true,false,true,false,true,true,true,true,true,false,false,false,true\n  ],\n  [ //I\n    false,false,true,true,false,false,true,false,false,true,true,false,true,true,true,true\n  ],\n  [ //J\n    false,false,true,true,false,false,true,false,false,true,true,false,true,true,true,true\n  ],\n  [ //K\n    false,false,false,true,false,false,true,true,true,true,true,true,true,false,false,true\n  ],\n  [ //L\n    true,true,false,false,false,true,false,false,true,true,true,true,false,true,false,true\n  ],\n  [ //M\n    true,true,true,true,true,false,true,false,true,true,false,false,true,false,false,false\n  ],\n  [ //N\n    true,false,true,false,false,true,true,false,false,false,true,false,true,true,true,true\n  ],\n  [ //O\n    false,false,false,true,true,true,true,true,false,true,false,true,true,false,false,true\n  ],\n  [ //P\n    true,false,false,true,true,true,true,true,true,true,false,false,true,false,false,false\n  ],\n  [ //Q\n    true,false,false,true,true,true,true,true,false,false,true,true,false,false,false,true\n  ],\n  [ //R\n    false,true,false,true,true,true,true,true,false,true,false,false,true,true,false,false\n  ],\n  [ //S\n    false,false,false,true,false,false,true,true,false,true,false,true,true,true,true,true\n  ],\n  [ //T\n    true,false,false,false,true,true,true,true,true,false,true,false,true,false,false,true\n  ],\n  [ //U\n    true,true,true,true,false,false,true,false,false,true,true,false,true,false,true,false\n  ],\n  [ //v\n    true,true,true,true,false,true,true,false,false,true,false,false,true,true,false,false\n  ],\n  [ //W\n    true,true,false,false,false,true,false,false,false,true,true,false,true,true,true,true\n  ],\n  [ //x\n    false,false,true,true,false,false,true,false,true,true,true,true,true,false,true,false\n  ]\n];\n\nexport default getAllCombinations;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Combination } from \"./combinations\";\n\nconst Table = styled.table`\n  display: inline-block;\n  margin: 0 10px 10px 0;\n`;\n\ntype CellProps = {\n  active?: boolean;\n};\nconst Cell = styled.td<CellProps>`\n  ${(props) => `\n    background: ${props.active ? \"#ccc\" : \"#fff\"};\n    border: 1px solid #999;\n    height: 20px;\n    width: 20px;\n  `}\n`;\n\ntype WinningComboGridProps = {\n  combo: Combination;\n};\nconst WinningComboGrid = (props: WinningComboGridProps) => {\n  const { combo } = props;\n  return (\n    <>\n      <Table>\n        <tbody>\n          <tr>\n            <Cell active={combo[0]} />\n            <Cell active={combo[1]} />\n            <Cell active={combo[2]} />\n            <Cell active={combo[3]} />\n          </tr>\n          <tr>\n            <Cell active={combo[4]} />\n            <Cell active={combo[5]} />\n            <Cell active={combo[6]} />\n            <Cell active={combo[7]} />\n          </tr>\n          <tr>\n            <Cell active={combo[8]} />\n            <Cell active={combo[9]} />\n            <Cell active={combo[10]} />\n            <Cell active={combo[11]} />\n          </tr>\n          <tr>\n            <Cell active={combo[12]} />\n            <Cell active={combo[13]} />\n            <Cell active={combo[14]} />\n            <Cell active={combo[15]} />\n          </tr>\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport default WinningComboGrid;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport getAllCombinations, { Combination } from \"./combinations\";\nimport WinningComboGrid from \"./WinningComboGrid\";\n\ntype CellProps = {\n  active?: boolean;\n};\nconst Cell = styled.td<CellProps>`\n  ${(props) => `\n    background: ${props.active ? \"#ccc\" : \"#fff\"};\n    border: 1px solid #999;\n    cursor: pointer;\n    height: 100px;\n    width: 100px;\n\n    &:hover {\n      border-color: #333;\n    }\n  `}\n`;\n\nfunction App() {\n  const [cellStates, setCellStates] = useState<Combination>(\n    new Array(16).fill(false) as Combination\n  );\n\n  const handleCellClick = (cell: number) => {\n    if (getActiveCount() === 9 && cellStates[cell] === false) {\n      return;\n    }\n\n    const newCellsState: Combination = [...cellStates];\n    newCellsState[cell] = !cellStates[cell];\n    setCellStates(newCellsState);\n  };\n\n  const getActiveCount = () =>\n    cellStates.reduce((prev, curr) => (curr ? prev + 1 : prev), 0);\n\n  const compareCombos = (w: Combination, c: Combination): boolean => {\n    let potentialCombo = true;\n    const allFalse = c.indexOf(true) === -1;\n    if (allFalse) {\n      return true;\n    } else {\n      for (let i = 0; i < 16; i++) {\n        if (c[i] === true && w[i] === false) {\n          potentialCombo = false;\n          break;\n        }\n      }\n    }\n\n    return potentialCombo;\n  };\n\n  const isPotentialThreeLineCombo = (combination: Combination): boolean => {\n    const winningCombos = getAllCombinations();\n    let potentialThreeLineCombo = false;\n    winningCombos.forEach((winningCombo) => {\n      if (compareCombos(winningCombo, combination)) {\n        potentialThreeLineCombo = true;\n        return;\n      }\n    });\n\n    return potentialThreeLineCombo;\n  };\n\n  const getPotentialCombos = (combination: Combination): Combination[] => {\n    const potentialCombos: Combination[] = [];\n    const winningCombos = getAllCombinations();\n    winningCombos.forEach((winningCombo) => {\n      if (compareCombos(winningCombo, combination)) {\n        potentialCombos.push(winningCombo);\n      }\n    });\n    return potentialCombos;\n  };\n\n  return (\n    <>\n      <div>{getActiveCount()}/9</div>\n      <table>\n        <tbody>\n          <tr>\n            <Cell active={cellStates[0]} onClick={() => handleCellClick(0)} />\n            <Cell active={cellStates[1]} onClick={() => handleCellClick(1)} />\n            <Cell active={cellStates[2]} onClick={() => handleCellClick(2)} />\n            <Cell active={cellStates[3]} onClick={() => handleCellClick(3)} />\n          </tr>\n          <tr>\n            <Cell active={cellStates[4]} onClick={() => handleCellClick(4)} />\n            <Cell active={cellStates[5]} onClick={() => handleCellClick(5)} />\n            <Cell active={cellStates[6]} onClick={() => handleCellClick(6)} />\n            <Cell active={cellStates[7]} onClick={() => handleCellClick(7)} />\n          </tr>\n          <tr>\n            <Cell active={cellStates[8]} onClick={() => handleCellClick(8)} />\n            <Cell active={cellStates[9]} onClick={() => handleCellClick(9)} />\n            <Cell active={cellStates[10]} onClick={() => handleCellClick(10)} />\n            <Cell active={cellStates[11]} onClick={() => handleCellClick(11)} />\n          </tr>\n          <tr>\n            <Cell active={cellStates[12]} onClick={() => handleCellClick(12)} />\n            <Cell active={cellStates[13]} onClick={() => handleCellClick(13)} />\n            <Cell active={cellStates[14]} onClick={() => handleCellClick(14)} />\n            <Cell active={cellStates[15]} onClick={() => handleCellClick(15)} />\n          </tr>\n        </tbody>\n      </table>\n      <div>\n        Potential combination:{\" \"}\n        {isPotentialThreeLineCombo(cellStates).toString()}\n      </div>\n      {getPotentialCombos(cellStates).map((combo) => (\n        <WinningComboGrid combo={combo} />\n      ))}\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}