{"version":3,"sources":["combinations.ts","ComboGrid.tsx","ThreeLineCombos.tsx","Book.tsx","Board.tsx","Seal.tsx","Footer.tsx","ActiveCount.tsx","SecondChancePointsPanel.tsx","LoadingIcon.tsx","storage.ts","analytics.tsx","Help.tsx","RemainingSeals.tsx","NextReset.tsx","probabilities.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getAllCombinations","Grid","styled","div","CellWrapper","Cell","props","active","required","ComboGrid","fullCombo","activeCombo","cells","i","push","toString","Wrapper","PlusMore","span","ThreeLineCombos","combos","slice","map","combo","length","Book","process","Board","SealContainer","size","img","spriteWidth","onClick","visible","Seal","StyledP","p","Link","a","Footer","href","target","rel","Date","getFullYear","StyledCount","ActiveCount","count","Button","button","Separator","SecondChancePointsPanel","onReset","onReshuffle","LoadingIcon","color","STORAGE_KEY","globalGa","window","gtag","TrackEvent","eventName","category","action","label","value","HelpWrapper","HelpP","bold","HelpA","HelpUl","ul","HelpLi","li","faded","Help","children","order","RemainingSeals","index","NextReset","now","daysUntilTuesday","getDay","year","month","getMonth","nextResetDay","getDate","daysInThisMonth","formattedMonth","formattedDay","dateString","reset","moment","tz","fromNow","lineShapes","countLines","lineShape","choose","set","x","calculateProbabilities","emptyIndices","Array","fill","undefined","_","filter","possibleBoards","Math","max","empties","newCombo","lineCounts","possibleBoard","min","lines1","lines2","lines3","App","loadedData","defaultCombo","existingCombo","localStorage","getItem","JSON","parse","load","useState","sealStates","setSealStates","reshuffling","setReshuffling","setAndPersistSealStates","setItem","stringify","save","getActiveCount","reduce","prev","curr","seals","seal","newSealState","handleSealClick","activeCount","probabilities","noLinesChance","noLinesChanceFormatted","toFixed","oneLineChance","oneLineChanceFormatted","twoLinesChance","twoLinesChanceFormatted","threeLinesChance","threeLinesChanceFormatted","setTimeout","activePart","inactivePart","shuffledCombo","j","floor","random","temp","shuffleCombination","combination","potentialCombos","forEach","winningCombo","w","c","potentialCombo","indexOf","compareCombos","getPotentialCombos","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"uOA+EeA,G,MA3EY,iBAAqB,CAC9C,EACE,GAAK,GAAK,GAAK,GAAK,GAAM,GAAK,GAAM,GAAK,GAAM,GAAM,GAAK,GAAK,GAAM,GAAM,GAAM,GAEpF,EACE,GAAM,GAAM,GAAM,GAAK,GAAM,GAAM,GAAK,GAAK,GAAM,GAAK,GAAM,GAAK,GAAK,GAAK,GAAK,GAEpF,EACE,GAAK,GAAM,GAAM,GAAM,GAAK,GAAK,GAAM,GAAM,GAAK,GAAM,GAAK,GAAM,GAAK,GAAK,GAAK,GAEpF,EACE,GAAK,GAAK,GAAK,GAAK,GAAK,GAAM,GAAK,GAAM,GAAK,GAAK,GAAM,GAAM,GAAK,GAAM,GAAM,GAEnF,EACE,GAAK,GAAK,GAAK,GAAK,GAAM,GAAK,GAAM,GAAM,GAAM,GAAK,GAAK,GAAM,GAAM,GAAK,GAAM,GAEpF,EACE,GAAM,GAAM,GAAM,GAAK,GAAK,GAAK,GAAK,GAAK,GAAM,GAAK,GAAM,GAAK,GAAK,GAAM,GAAM,GAEpF,EACE,GAAK,GAAM,GAAK,GAAM,GAAM,GAAK,GAAK,GAAM,GAAM,GAAM,GAAK,GAAM,GAAK,GAAK,GAAK,GAEpF,EACE,GAAK,GAAM,GAAM,GAAK,GAAK,GAAM,GAAK,GAAM,GAAK,GAAK,GAAK,GAAK,GAAK,GAAM,GAAM,GAEnF,EACE,GAAK,GAAK,GAAK,GAAK,GAAM,GAAM,GAAK,GAAM,GAAM,GAAK,GAAK,GAAM,GAAK,GAAM,GAAK,GAEnF,EACE,GAAK,GAAM,GAAM,GAAK,GAAM,GAAK,GAAM,GAAK,GAAK,GAAK,GAAK,GAAK,GAAM,GAAM,GAAM,GAEpF,EACE,GAAM,GAAK,GAAM,GAAK,GAAM,GAAK,GAAK,GAAM,GAAM,GAAK,GAAM,GAAM,GAAK,GAAK,GAAK,GAEpF,EACE,GAAK,GAAM,GAAM,GAAM,GAAK,GAAK,GAAK,GAAK,GAAK,GAAM,GAAK,GAAM,GAAK,GAAM,GAAM,GAEpF,EACE,GAAK,GAAK,GAAK,GAAK,GAAM,GAAK,GAAK,GAAM,GAAM,GAAM,GAAK,GAAM,GAAM,GAAM,GAAK,GAEpF,EACE,GAAM,GAAM,GAAM,GAAK,GAAM,GAAM,GAAK,GAAK,GAAK,GAA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","file":"static/js/main.928d3cfc.chunk.js","sourcesContent":["// prettier-ignore\nexport type Combination = [boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean];\n\n// prettier-ignore\nconst getAllCombinations = (): Combination[] => [\n  [ //A\n    true,true,true,true,false,true,false,true,false,false,true,true,false,false,false,true\n  ],\n  [ //S\n    false,false,false,true,false,false,true,true,false,true,false,true,true,true,true,true\n  ],\n  [ //G\n    true,false,false,false,true,true,false,false,true,false,true,false,true,true,true,true\n  ],\n  [ //M\n    true,true,true,true,true,false,true,false,true,true,false,false,true,false,false,false\n  ],\n  [ //B\n    true,true,true,true,false,true,false,false,false,true,true,false,false,true,false,true\n  ],\n  [ //O\n    false,false,false,true,true,true,true,true,false,true,false,true,true,false,false,true\n  ],\n  [ //N\n    true,false,true,false,false,true,true,false,false,false,true,false,true,true,true,true\n  ],\n  [ //I\n    true,false,false,true,true,false,true,false,true,true,true,true,true,false,false,false\n  ],\n  [ //U\n    true,true,true,true,false,false,true,false,false,true,true,false,true,false,true,false\n  ],\n  [ //H\n    true,false,false,true,false,true,false,true,true,true,true,true,false,false,false,true\n  ],\n  [ //C\n    false,true,false,true,false,true,true,false,false,true,false,false,true,true,true,true\n  ],\n  [ //T\n    true,false,false,false,true,true,true,true,true,false,true,false,true,false,false,true\n  ],\n  [ //D\n    true,true,true,true,false,true,true,false,false,false,true,false,false,false,true,true\n  ],\n  [ //K\n    false,false,false,true,false,false,true,true,true,true,true,true,true,false,false,true\n  ],\n  [ //W\n    true,true,false,false,false,true,false,false,false,true,true,false,true,true,true,true\n  ],\n  [ //P\n    true,false,false,true,true,true,true,true,true,true,false,false,true,false,false,false\n  ],\n  [ //V\n    true,true,true,true,false,true,true,false,false,true,false,false,true,true,false,false\n  ],\n  [ //Q\n    true,false,false,true,true,true,true,true,false,false,true,true,false,false,false,true\n  ],\n  [ //J\n    false,false,true,true,false,false,true,false,false,true,true,false,true,true,true,true\n  ],\n  [ //E\n    true,false,false,false,true,true,false,false,true,true,true,true,true,false,false,true\n  ],\n  [ //F\n    true,false,true,false,true,true,true,true,false,false,true,false,false,false,true,true\n  ],\n  [ //X\n    false,false,true,true,false,false,true,false,true,true,true,true,true,false,true,false\n  ],\n  [ //L\n    true,true,false,false,false,true,false,false,true,true,true,true,false,true,false,true\n  ],\n  [ //R\n    false,true,false,true,true,true,true,true,false,true,false,false,true,true,false,false\n  ]\n];\n\nexport default getAllCombinations;\n","import styled from \"styled-components\";\nimport { Combination } from \"./combinations\";\n\nconst Grid = styled.div`\n  background: #e3d69c;\n  border: 1px solid #969074;\n  display: inline-flex;\n  flex-wrap: wrap;\n  font-size: 0;\n  margin: 0 12px 12px 0;\n  padding: 3px;\n  width: 72px;\n`;\n\nconst CellWrapper = styled.div`\n  width: 25%;\n`;\n\ntype CellProps = {\n  active: boolean;\n  required: boolean;\n};\nconst Cell = styled.div<CellProps>`\n  ${(props) => {\n    if (props.active && props.required) {\n      return `\n        background: #fff;\n      `;\n    }\n    if (props.required) {\n      return `\n        background: #9a8c6b;\n      `;\n    }\n    return `\n      background: transparent;\n      border: 2px solid rgba(255,255,255,0.4);\n    `;\n  }}\n  border-radius: 50%;\n  display: inline-block;\n  height: 14px;\n  margin: 1px;\n  width: 14px;\n`;\n\ntype ComboGridProps = {\n  fullCombo: Combination;\n  activeCombo: Combination;\n};\nconst ComboGrid = (props: ComboGridProps) => {\n  const { fullCombo, activeCombo } = props;\n  const cells = [];\n  for (let i = 0; i < 16; i++) {\n    cells.push(\n      <CellWrapper key={i.toString()}>\n        <Cell active={activeCombo[i]} required={fullCombo[i]} />\n      </CellWrapper>\n    );\n  }\n  return <Grid>{cells}</Grid>;\n};\n\nexport default ComboGrid;\n","import styled from \"styled-components\";\nimport { Combination } from \"./combinations\";\nimport ComboGrid from \"./ComboGrid\";\n\nconst Wrapper = styled.div`\n  left: 571px;\n  position: absolute;\n  top: 347px;\n  width: 340px;\n`;\nconst PlusMore = styled.span`\n  color: #876a1a;\n  font-size: 12px;\n  font-weight: bold;\n  position: absolute;\n  right: 15px;\n  text-align: right;\n  top: 415px;\n`;\n\ntype ThreeLineCombosProps = {\n  combos: Combination[];\n  activeCombo: Combination;\n};\nconst ThreeLineCombos = ({ combos, activeCombo }: ThreeLineCombosProps) => {\n  return (\n    <Wrapper>\n      {combos.slice(0, 20).map((combo, i) => (\n        <ComboGrid\n          fullCombo={combo}\n          activeCombo={activeCombo}\n          key={i.toString()}\n        />\n      ))}\n      {combos.length > 20 && (\n        <PlusMore>+ {combos.length - 20} more...</PlusMore>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ThreeLineCombos;\n","import styled from \"styled-components\";\n\nconst Book = styled.div`\n  background-image: url(${process.env.PUBLIC_URL}/images/book.png);\n  background-repeat: no-repeat;\n  height: 800px;\n  margin: 0 auto 20px;\n  position: relative;\n  width: 1200px;\n`;\n\nexport default Book;\n","import styled from \"styled-components\";\n\nconst Board = styled.div`\n  font-size: 0;\n  height: 240px;\n  left: 630px;\n  position: absolute;\n  top: 36px;\n  width: 248px;\n`;\n\nexport default Board;\n","import styled from \"styled-components\";\n\ntype SealProps = {\n  visible?: boolean;\n  img: number;\n  onClick?: () => void;\n  size?: number;\n};\n\nconst spriteWidth = 960;\n\nconst SealContainer = styled.div<SealProps>`\n  ${(props) => `\n    background: url(${process.env.PUBLIC_URL}/images/seals.png);\n    background-position: -${(props.size || 60) * (props.img - 1)}px 0;\n    background-repeat: no-repeat;\n    background-size: ${\n      props.size\n        ? `${(spriteWidth / 60) * props.size}px ${props.size}px`\n        : \"auto\"\n    };\n    cursor: ${props.onClick ? \"pointer\" : \"default\"};\n    display: inline-block;\n    height: ${props.size || 60}px;\n    opacity: ${props.visible ? 1 : 0};\n    transition: .5s;\n    width: ${props.size || 62}px;\n  `}\n`;\n\nconst Seal = (props: SealProps) => {\n  const { img } = props;\n  return <SealContainer {...props} img={img} />;\n};\n\nexport default Seal;\n","import styled from \"styled-components\";\n\nconst StyledP = styled.p`\n  font-size: 12px;\n  margin-bottom: 0;\n  text-align: center;\n`;\n\nconst Link = styled.a`\n  color: #0056b3;\n`;\n\nconst Footer = () => {\n  return (\n    <StyledP>\n      Created by{\" \"}\n      <Link\n        href=\"https://eu.finalfantasyxiv.com/lodestone/character/2387352\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Xurion Uroxin\n      </Link>{\" \"}\n      of Cerberus |{\" \"}\n      <Link\n        href=\"https://github.com/xurion\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Github\n      </Link>\n      <br />\n      This website is not affiliated with Square Enix.\n      <br />\n      &copy; 2010 - {new Date().getFullYear()} SQUARE ENIX CO., LTD. All Rights\n      Reserved.\n    </StyledP>\n  );\n};\n\nexport default Footer;\n","import styled from \"styled-components\";\n\nconst StyledCount = styled.div`\n  color: #fff;\n  font-size: 60px;\n  left: 885px;\n  line-height: 1;\n  position: absolute;\n  text-align: center;\n  text-shadow: 0px 0px 6px #734f00;\n  top: 75px;\n  width: 100px;\n`;\n\ntype ActiveCountProps = {\n  count: number;\n};\n\nconst ActiveCount = ({ count }: ActiveCountProps) => {\n  return <StyledCount>{count}</StyledCount>;\n};\n\nexport default ActiveCount;\n","import styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  left: 132px;\n  position: absolute;\n  top: 457px;\n`;\n\nconst Button = styled.button`\n  background: transparent;\n  border: none;\n  color: #fff;\n  font-weight: bold;\n  text-shadow: 0 0 6px #000;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst Separator = styled.span`\n  border-left: 1px solid #000;\n  border-right: 1px solid #fff;\n  display: inline-block;\n  height: 16px;\n  margin: 0 15px;\n  position: relative;\n  top: 2px;\n`;\n\ntype SecondChancePointsPanelProps = {\n  onReset: () => void;\n  onReshuffle: () => void;\n};\nconst SecondChancePointsPanel = ({\n  onReset,\n  onReshuffle,\n}: SecondChancePointsPanelProps) => {\n  return (\n    <Wrapper>\n      <Button onClick={onReset}>Reset</Button>\n      <Separator />\n      <Button onClick={onReshuffle}>Reshuffle</Button>\n    </Wrapper>\n  );\n};\n\nexport default SecondChancePointsPanel;\n","import CircleLoader from \"react-spinners/CircleLoader\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  left: 690px;\n  position: absolute;\n  top: 515px;\n`;\n\nconst LoadingIcon = () => (\n  <Wrapper>\n    <CircleLoader color=\"#66b19f\" size=\"100px\" />\n  </Wrapper>\n);\n\nexport default LoadingIcon;\n","import { Combination } from \"./combinations\";\nconst STORAGE_KEY = \"wt_combo\";\n\nconst load = (defaultCombo: Combination): Combination => {\n  const existingCombo = window.localStorage.getItem(STORAGE_KEY);\n  return existingCombo ? JSON.parse(existingCombo) : defaultCombo;\n};\n\nconst save = (combo: Combination) =>\n  window.localStorage.setItem(STORAGE_KEY, JSON.stringify(combo));\n\nexport { load, save };\n","const globalGa =\n  process.env.NODE_ENV === \"development\" ? console.log : window.gtag;\n\ntype TrackEventProps = {\n  eventName: string;\n  category?: string;\n  action?: string;\n  label?: string;\n  value?: number;\n};\n\nexport const TrackEvent = ({\n  eventName,\n  category,\n  action,\n  label,\n  value,\n}: TrackEventProps) => {\n  globalGa(\"event\", eventName, { category, action, label, value });\n};\n","import styled from \"styled-components\";\n\nconst HelpWrapper = styled.div`\n  color: #fff;\n  left: 90px;\n  position: absolute;\n  text-shadow: 0 0 2px #000;\n  top: 537px;\n  width: 400px;\n`;\n\nexport const HelpP = styled.p<{ bold?: boolean }>`\n  font-weight: ${({ bold }) => (bold ? \"bold\" : \"normal\")};\n  margin-bottom: 10px;\n`;\n\nexport const HelpA = styled.a`\n  color: #fff;\n  text-decoration: underline;\n\n  &:hover {\n    color: #fff;\n  }\n`;\n\nexport const HelpUl = styled.ul``;\n\nexport const HelpLi = styled.li<{ faded?: boolean }>`\n  opacity: ${({ faded }) => (faded ? \"0.5\" : \"1\")};\n`;\n\ntype HelpProps = {\n  children: JSX.Element;\n};\n\nconst Help = ({ children }: HelpProps) => {\n  return <HelpWrapper>{children}</HelpWrapper>;\n};\n\nexport default Help;\n","import styled from \"styled-components\";\nimport { Combination } from \"./combinations\";\nimport Seal from \"./Seal\";\n\nconst Wrapper = styled.div`\n  font-size: 0;\n  left: 950px;\n  position: absolute;\n  top: 165px;\n  width: 110px;\n`;\n\ntype RemainingSealsProps = {\n  activeCombo: Combination;\n};\n\nconst order = [1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15, 8, 16];\n\nconst RemainingSeals = ({ activeCombo }: RemainingSealsProps) => (\n  <Wrapper>\n    {order.map((index) => (\n      <Seal\n        key={index.toString()}\n        img={index}\n        visible={!activeCombo[index - 1]}\n        size={50}\n      />\n    ))}\n  </Wrapper>\n);\n\nexport default RemainingSeals;\n","import styled from \"styled-components\";\nimport moment from \"moment\";\nimport \"moment-timezone\";\n\nconst Wrapper = styled.div`\n  color: #d97761;\n  position: absolute;\n  right: 690px;\n  top: 87px;\n`;\n\nconst NextReset = () => {\n  const now = new Date();\n  let daysUntilTuesday = 2 - now.getDay();\n  if (daysUntilTuesday < 0) {\n    daysUntilTuesday += 7;\n  }\n  let year = now.getFullYear();\n  let month: number = now.getMonth();\n  let nextResetDay = now.getDate() + daysUntilTuesday;\n  const daysInThisMonth = new Date(year, month + 1, 0).getDate();\n  if (nextResetDay > daysInThisMonth) {\n    nextResetDay = nextResetDay - daysInThisMonth;\n\n    month = month + 1;\n    if (month === 12) {\n      month = 0;\n      year = year + 1;\n    }\n  }\n\n  let formattedMonth = month < 10 ? `0${month + 1}` : (month + 1).toString();\n  let formattedDay =\n    nextResetDay < 10 ? `0${nextResetDay}` : nextResetDay.toString();\n  const dateString = `${year}-${formattedMonth}-${formattedDay} 09:00`;\n\n  const reset = moment.tz(dateString, \"UTC\");\n\n  return <Wrapper>{reset && `Next weekly reset: ${reset.fromNow()}`}</Wrapper>;\n};\n\nexport default NextReset;\n","import { Combination } from \"./combinations\";\n\n/**\n * All possible line shapes from 4x cells per line.\n */\nconst lineShapes: Array<[number, number, number, number]> = [\n  [0, 1, 2, 3],\n  [4, 5, 6, 7],\n  [8, 9, 10, 11],\n  [12, 13, 14, 15],\n  [0, 4, 8, 12],\n  [1, 5, 9, 13],\n  [2, 6, 10, 14],\n  [3, 7, 11, 15],\n  [0, 5, 10, 15],\n  [3, 6, 9, 12],\n];\n\n/**\n * Returns the number of lines in the given Combination.\n */\nfunction countLines(combo: Combination): number {\n  let count = 0;\n  for (const lineShape of lineShapes) {\n    if (\n      combo[lineShape[0]] &&\n      combo[lineShape[1]] &&\n      combo[lineShape[2]] &&\n      combo[lineShape[3]]\n    ) {\n      ++count;\n    }\n  }\n  return count;\n}\n\nfunction choose(set: number[], count: number): number[][] {\n  if (count >= set.length) {\n    return [[...set]];\n  } else if (count === 0) {\n    return [[]];\n  } else {\n    return [\n      ...choose(set.slice(1), count - 1).map((x) => [set[0], ...x]),\n      ...choose(set.slice(1), count),\n    ];\n  }\n}\n\n/**\n * Returns the probability percentage of achieving 1, 2 or 3 lines against the\n * given Combination.\n */\nexport default function calculateProbabilities(combo: Combination): {\n  lines1: number;\n  lines2: number;\n  lines3: number;\n} {\n  const emptyIndices = Array(16)\n    .fill(undefined)\n    .map((_, index) => index)\n    .filter((index) => !combo[index]);\n  const possibleBoards = choose(\n    emptyIndices,\n    Math.max(emptyIndices.length - 7, 0)\n  ).map((empties) => {\n    const newCombo: Combination = [...combo];\n    for (const index of empties) {\n      newCombo[index] = true;\n    }\n    return newCombo;\n  });\n\n  const lineCounts = [0, 0, 0, 0];\n  for (const possibleBoard of possibleBoards) {\n    ++lineCounts[Math.min(countLines(possibleBoard), 3)];\n  }\n\n  return {\n    lines1:\n      ((lineCounts[1] + lineCounts[2] + lineCounts[3]) /\n        possibleBoards.length) *\n      100,\n    lines2: ((lineCounts[2] + lineCounts[3]) / possibleBoards.length) * 100,\n    lines3: (lineCounts[3] / possibleBoards.length) * 100,\n  };\n}\n","import { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport styled from \"styled-components\";\nimport \"./styles.css\";\nimport getAllCombinations, { Combination } from \"./combinations\";\nimport ThreeLineCombos from \"./ThreeLineCombos\";\nimport Book from \"./Book\";\nimport Board from \"./Board\";\nimport Seal from \"./Seal\";\nimport Footer from \"./Footer\";\nimport ActiveCount from \"./ActiveCount\";\nimport SecondChancePointsPanel from \"./SecondChancePointsPanel\";\nimport LoadingIcon from \"./LoadingIcon\";\nimport { load, save } from \"./storage\";\nimport { TrackEvent } from \"./analytics\";\nimport Help, { HelpA, HelpLi, HelpP, HelpUl } from \"./Help\";\nimport RemainingSeals from \"./RemainingSeals\";\nimport NextReset from \"./NextReset\";\nimport calculateProbabilities from \"./probabilities\";\n\nconst Wrapper = styled.div`\n  background-image: url(${process.env.PUBLIC_URL}/images/idyllshire.png);\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  min-height: 100%;\n  padding: 20px 0;\n`;\n\nconst compareCombos = (w: Combination, c: Combination): boolean => {\n  let potentialCombo = true;\n  const allFalse = c.indexOf(true) === -1;\n  if (allFalse) {\n    return true;\n  }\n\n  for (let i = 0; i < 16; i++) {\n    if (c[i] === true && w[i] === false) {\n      potentialCombo = false;\n      break;\n    }\n  }\n\n  return potentialCombo;\n};\n\nconst shuffleCombination = (combo: Combination) => {\n  const shuffledCombo: Combination = [...combo];\n  for (let i = shuffledCombo.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    let temp = shuffledCombo[i];\n    shuffledCombo[i] = shuffledCombo[j];\n    shuffledCombo[j] = temp;\n  }\n  return shuffledCombo;\n};\n\nfunction App() {\n  const loadedData = load(new Array(16).fill(false) as Combination);\n  const [sealStates, setSealStates] = useState(loadedData);\n  const [reshuffling, setReshuffling] = useState(false);\n\n  const setAndPersistSealStates = (combo: Combination) => {\n    setSealStates(combo);\n    save(combo);\n  };\n\n  const handleSealClick = (seal: number) => {\n    if (getActiveCount() === 9 && sealStates[seal] === false) {\n      return;\n    }\n\n    const newSealState: Combination = [...sealStates];\n    newSealState[seal] = !sealStates[seal];\n    TrackEvent({\n      eventName: newSealState[seal] ? \"activate_seal\" : \"deactivate_seal\",\n      value: seal + 1,\n    });\n    setAndPersistSealStates(newSealState);\n  };\n\n  const getActiveCount = () =>\n    sealStates.reduce((prev, curr) => (curr ? prev + 1 : prev), 0);\n\n  const getPotentialCombos = (combination: Combination): Combination[] => {\n    const potentialCombos: Combination[] = [];\n    const winningCombos = getAllCombinations();\n    winningCombos.forEach((winningCombo) => {\n      if (compareCombos(winningCombo, combination)) {\n        potentialCombos.push(winningCombo);\n      }\n    });\n    return potentialCombos;\n  };\n\n  const reset = () => {\n    setAndPersistSealStates(new Array(16).fill(false) as Combination);\n  };\n\n  const handleResetClick = () => {\n    TrackEvent({\n      eventName: \"reset_board\",\n      value: getActiveCount(),\n    });\n    reset();\n  };\n\n  const reshuffle = () => {\n    setReshuffling(true);\n    const active = getActiveCount();\n    TrackEvent({\n      eventName: \"reshuffle_board\",\n      value: active,\n    });\n    reset();\n    setTimeout(() => {\n      const activePart = new Array(active).fill(true);\n      const inactivePart = new Array(16 - active).fill(false);\n      const combo = shuffleCombination([\n        ...activePart,\n        ...inactivePart,\n      ] as Combination);\n      setAndPersistSealStates(combo);\n      setReshuffling(false);\n    }, 1000);\n  };\n\n  const seals: JSX.Element[] = [];\n  for (let i = 0; i < 16; i++) {\n    seals.push(\n      <Seal\n        visible={sealStates[i]}\n        onClick={() => handleSealClick(i)}\n        img={i + 1}\n        key={i.toString()}\n      />\n    );\n  }\n\n  const activeCount = getActiveCount();\n  const probabilities = calculateProbabilities(sealStates);\n  const noLinesChance = 100 - probabilities.lines1;\n  const noLinesChanceFormatted = `${\n    noLinesChance % 1 === 0 ? noLinesChance : noLinesChance.toFixed(1)\n  }%`;\n  const oneLineChance = probabilities.lines1;\n  const oneLineChanceFormatted = `${\n    oneLineChance % 1 === 0 ? oneLineChance : oneLineChance.toFixed(1)\n  }%`;\n  const twoLinesChance = probabilities.lines2;\n  const twoLinesChanceFormatted = `${\n    twoLinesChance % 1 === 0 ? twoLinesChance : twoLinesChance.toFixed(1)\n  }%`;\n  const threeLinesChance = probabilities.lines3;\n  const threeLinesChanceFormatted = `${\n    threeLinesChance % 1 === 0 ? threeLinesChance : threeLinesChance.toFixed(1)\n  }%`;\n\n  return (\n    <Wrapper>\n      <Book>\n        <NextReset />\n        <ActiveCount count={activeCount} />\n        <Board>{seals}</Board>\n        <RemainingSeals activeCombo={sealStates} />\n        <SecondChancePointsPanel\n          onReset={handleResetClick}\n          onReshuffle={reshuffle}\n        />\n        {!reshuffling && (\n          <Help>\n            {activeCount === 0 ? (\n              <>\n                <HelpP>\n                  Welcome to the FFXIV Wondrous Tails helper! Activate seals on\n                  the top right to get started.\n                </HelpP>\n                <HelpP>\n                  Reset or reshuffle the board with the buttons above.\n                </HelpP>\n                <HelpP>\n                  Line chance calculations will appear here. Feedback and\n                  suggestions welcome over on the{\" \"}\n                  <HelpA\n                    href=\"https://github.com/xurion/ffxiv-wondrous-tails/issues\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    onClick={() =>\n                      TrackEvent({\n                        eventName: \"issue_tracker\",\n                      })\n                    }\n                  >\n                    issue tracker\n                  </HelpA>\n                  .\n                </HelpP>\n              </>\n            ) : (\n              <>\n                <HelpP bold>Probabilities</HelpP>\n                <HelpUl>\n                  <HelpLi faded={noLinesChance === 0}>\n                    No lines: {noLinesChanceFormatted}\n                  </HelpLi>\n                  <HelpLi faded={oneLineChance === 0}>\n                    One line: {oneLineChanceFormatted}\n                  </HelpLi>\n                  <HelpLi faded={twoLinesChance === 0}>\n                    Two lines: {twoLinesChanceFormatted}\n                  </HelpLi>\n                  <HelpLi faded={threeLinesChance === 0}>\n                    Three lines: {threeLinesChanceFormatted}\n                  </HelpLi>\n                </HelpUl>\n              </>\n            )}\n          </Help>\n        )}\n        {reshuffling ? (\n          <LoadingIcon />\n        ) : (\n          <ThreeLineCombos\n            combos={getPotentialCombos(sealStates)}\n            activeCombo={sealStates}\n          />\n        )}\n      </Book>\n      <Footer />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}